#!/bin/sh
set -eu

cat_file()
{
	found=
	pkg_no_ver=${1%=*}
	pkg_no_ver=${pkg_no_ver%/*}

	is_ctrl_file_path=n
	case "$2" in
		DEBIAN/*)
			is_ctrl_file_path=y
			;;
	esac

	if [ 'ii ' = "$(dpkg-query -W -f '${db:Status-Abbrev}' -- "$pkg_no_ver" 2>/dev/null)" ]; then
		if [ "$is_ctrl_file_path" = y ]; then
			dpkg-query --control-show -- "$pkg_no_ver" "${2#DEBIAN/}"
			return
		else
			dpkg-query -L -- "$pkg_no_ver" 2>/dev/null | while read -r file; do
				# shellcheck disable=SC2254
				case "$file" in
					$2)
						cat -- "$file"
						return 1
						;;
				esac
			done || return 0
		fi

		found=installed
	fi

	if apt-get download -q -- "$1" >/dev/null 2>&1; then
		if [ "$is_ctrl_file_path" = y ]; then
			if ! dpkg-deb --ctrl-tarfile -- *.deb | tar --wildcards -Ox -- ".${2#DEBIAN}" 2>/dev/null; then
				found=$found${found:+ and }downloaded
			fi
		else
			if ! dpkg-deb --fsys-tarfile -- *.deb | tar --wildcards -Ox -- ".${2}" 2>/dev/null; then
				found=$found${found:+ and }downloaded
			fi
		fi
		rm -f -- *.deb
	elif [ -z "$found" ]; then
		printf "Package %s unknown or unavailable\n" "$1" >&2
		return 1
	fi

	if [ -n "$found" ]; then
		printf "No file matching %s in %s package %s\n" "$2" "$found" "$1" >&2
		return 1
	fi

	return 0
}

usage()
{
	printf "\
Usage: %s pkg[{=pkg_version_number | /target_release}][{//file_path | //DEBIAN/ctrl_file }]...
" "$1"
}

if [ $# -eq 0 ]; then
	usage "$0"
	exit 2
fi

while getopts 'h' opt; do
	case "$opt" in
		h)
			usage "$0"
			exit 0
			;;
		*)
			usage "$0" >&2
			exit 2
			;;
	esac
done

pager=
if [ -t 1 ]; then
	pager=$(command -v pager) || :
fi

tmpdir=$(mktemp -d) || exit
# shellcheck disable=SC2064
trap "rm -rf -- '$tmpdir'" EXIT HUP INT TERM
cd -- "$tmpdir" || exit

for pkg_and_path in "$@"; do
	pkg=${pkg_and_path%%//*}
	path=${pkg_and_path#"$pkg"}
	path=${path#//}

	# Default to the copyright file for historic reasons
	: "${path:=/usr/share/doc/*/copyright}"

	eval cat_file \"\$pkg\" \"\$path\" ${pager:+2>&1 | \"$pager\"}
done
